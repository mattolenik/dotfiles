# vi: ft=zsh
JQ_PRIVATE_IP='.Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddresses[].PrivateIpAddress'

jqr() {
  echo "$1" | jq -r "$2"
}

describe-instance() {
  local instance_id=$1
  local profile=$2
  local result="$(aws --profile=$profile ec2 describe-instances --instance-id i-${instance_id#i-} 2>&1)"
  echo "$result" | grep -q "InvalidInstanceID.NotFound" && return 4
  echo "$result"
}

#jq -r "$JQ_PRIVATE_IP"

# Returns the private IP of an EC2 instance. Argument can have the 'i-' instance prefix or not.
get-instance-ip() {
  local instance_id=$1
  local profile=$2
  if [[ -z $profile ]]; then
    instance="$(describe-instance $instance_id qa)"
    [[ $? == 0 ]] && jqr "$instance" "$JQ_PRIVATE_IP" && return
    instance="$(describe-instance $instance_id prod)"
    [[ $? == 0 ]] && jqr "$instance" "$JQ_PRIVATE_IP" && return
    echo "No instance found" && return 1
  fi
}

aws-profile() {
  local profile=$1
  if [[ -z $profile ]]; then
    unset AWS_PROFILE
    unset AWS_DEFAULT_PROFILE
    return 0
  fi
  export AWS_PROFILE=$profile
  export AWS_DEFAULT_PROFILE=$profile
}

aws-env() {
  env | grep -i aws
}

aws-assume-role() {
  creds="$(aws sts assume-role --role-arn $1 --role-session-name $2 | jq '.Credentials')"
  export AWS_ACCESS_KEY_ID="$(jq -r '.AccessKeyId' <<< "$creds")"
  export AWS_SECRET_ACCESS_KEY="$(jq -r '.SecretAccessKey' <<< "$creds")"
}

alias ssm-ssh='aws ssm start-session --region ${AWS_REGION:-ca-central-1} --target'
alias ssh-ssm='aws ssm start-session --region ${AWS_REGION:-ca-central-1} --target'

get-instance-by-name() {
  aws ec2 --region ca-central-1 describe-instances --filters "Name=tag:Name,Values=$1" 'Name=instance-state-name,Values=running' --output text --query 'Reservations[*].Instances[*].InstanceId'
}
